InfluxDB每秒可以处理成千上万条数据。 处理长时间大量数据可能会造成存储问题。 一个自然的解决方案是降低取样数据; 只在有限的时间保持高精度的原始数据，并将较低的精度，汇总数据存储更长时间或永久存储。
InfluxDB提供了两个功能 - 连续查询（Continuous Queries CQ）和保留策略（Retention Policies RP） - 自动执行降低采样和使旧数据过期的过程。 本指南介绍了CQ和RP的实际使用案例，并介绍了如何在InfluxDB中设置这些功能。

Definitions 定义
连续查询（CQ）是在数据库中自动周期性运行的InfluxQL查询。 CQ在SELECT子句中需要一个函数，并且必须包含一个GROUP BY time() 子句。
保留策略（RP）是InfluxDB数据结构的一部分，描述了InfluxDB保存数据的时间。 InfluxDB会比较本地服务器的时间戳和数据的时间戳，并删除比RP的DURATION更早的数据。 一个数据库可以有多个RP，每个RP中的数据库都是唯一的。
本指南不会详细介绍创建和管理CQ和RP的语法。 如果您对这两个概念都不熟悉，我们建议您查看详细的CQ文档和RP文档。

对数据取样
本节使用虚构的实时数据, 该数据记录了一个餐厅每10s间隔内通过电话和网站订餐的数量. 我们将这些数据存储在一个名为数据库名为food_data, measurement为orders, field为phone和website的表中.
样例数据:
name: orders
------------
time			               phone	 website
2016-05-10T23:18:00Z	 10 	   30
2016-05-10T23:18:10Z	 12 	   39
2016-05-10T23:18:20Z	 11 	   56

目标:
假设从长远来看, 我们只对30分钟内通过电话和网站的平均订单数量感兴趣. 在接下来的步骤中, 我们使用RP和CQ来:
自动将十秒的间隔数据聚合到30分钟的间隔数据
自动删除原始十秒间隔数据中超过两个小时的数据
自动删除30分钟间隔的数据中超过52周的数据

数据库准备:
在将数据写入数据库food_data之前，我们执行以下步骤。 在插入任何数据之前我们这样做，因为CQ只是针对最近的数据运行; 也就是说，数据的时间戳不会比now()减去CQ的FOR子句更早，或者如果CQ没有FOR子句，数据的时间戳不会比now()减去GROUP BY的time()间隔的时间更早。
1. 创建数据库:
  > CREATE DATABASE "food_data"
2. 创建2小时的DEFAULT RP(retention policy保留策略)
如果我们在向数据库写入point时没有提供显式的RP，InfluxDB将写入DEFAULT RP。 我们使DEFAULT RP将数据保留两个小时，因为我们希望InfluxDB自动将传入的十秒钟间隔的数据写入该RP。
使用CREATE RETENTION POLICY语句来创建一个DEFAULT RP:
> CREATE RETENTION POLICY "two_hours" ON "food_data" DURATION 2h REPLICATION 1 DEFAULT
该语句创建一个叫做two_hours的RP存在于数据库food_data中, two_hours保存数据的持续时间为2个小时, 并且它是数据库food_data的默认RP.
! 复制因子（REPLICATION 1）是必需的参数，但对于单节点实例必须始终设置为1。
注意：当我们在步骤1中创建food_data数据库时，InfluxDB会自动生成一个名为autogen的RP，并将其设置为数据库的DEFAULT RP。 autogen RP具有无限的保留期限。 通过上面的查询，two_hours RP将替换autogen RP作为为food_data数据库的DEFAULT RP。
3. 创建一个52-week RP
接下来我们要创建另一个保存数据52周的RP，而不是数据库的DEFAULT RP。 最终，30分钟的汇总数据将被存储在这个RP中。
使用CREATE RETENTION POLICY 语句来创建一个非DEFAULT的数据库:
> CREATE RETENTION POLICY "a_year" ON "food_data" DURATION 52w REPLICATION 1
该语句创建了一个叫做a_year的RP存在于数据库food_data中. a_year保存数据的持续时间为52周(52w). 语句中没有DEFAULT参数确保a_year不是数据库food_data的默认DEFAULT RP.也就是说，针对没有指定RP的food_data的写操作和读操作仍然会使用two_hours RP（DEFAULT RP）。
4. 创建CQ
现在我们已经建立了我们的RP，我们要创建一个CQ，它能够自动地，周期性地将采样频率是十秒钟的数据降低采样频率为30分钟，并将这些结果以不同的保留策略存储在不同的measurement中。
使用CREATE CONTINOUS QUERY语句来创建一个CQ:
> CREATE CONTINUOUS QUERY "cq_30m" ON "food_data" BEGIN
  SELECT mean("website") AS "mean_website",mean("phone") AS "mean_phone"
  INTO "a_year"."downsampled_orders"
  FROM "orders"
  GROUP BY time(30m)
END
该语句在数据库food_data中创建了一个叫做cq_30m的CQ. cq_30m告诉InfluxDB计算measurement为orders, 并且RP是默认的two_hours中的两个field website和phone的30分钟的平均值.
同时告诉InfluxDB将计算的平均值以field keys为meas_website和mean_phone写入到保留策略为a_year,measurement为downsampled_orders中. InfluxDB会每30分钟运行一次该查询来处理前30分钟的数据.
注意：请注意，我们在INTO子句中完全限定了（即，我们使用语法"<retention_policy>"."<measurement>"）measurement。 InfluxDB需要这种语法才能将数据写入除DEFAULT RP之外的RP。

结果
通过新的CQ和两个新的RP，food_data准备开始接收数据。 在向我们的数据库写入数据并让其运行一会之后，我们看到两个度量：order和downsampled_orders。
> SELECT * FROM "orders" LIMIT 5
name: orders
---------
time			                phone  website
2016-05-13T23:00:00Z	  10     30
2016-05-13T23:00:10Z	  12     39
2016-05-13T23:00:20Z	  11     56
2016-05-13T23:00:30Z	  8      34
2016-05-13T23:00:40Z	  17     32

> SELECT * FROM "a_year"."downsampled_orders" LIMIT 5
name: downsampled_orders
---------------------
time			                mean_phone  mean_website
2016-05-13T15:00:00Z	  12          23
2016-05-13T15:30:00Z	  13          32
2016-05-13T16:00:00Z	  19          21
2016-05-13T16:30:00Z	  3           26
2016-05-13T17:00:00Z	  4           23

orders中的数据是位于two-hour RP中的采样频率为十秒钟的原始数据。 downsampled_orders中的数据是受52-week RP影响的采样频率为30分钟的聚合数据。
请注意，downsampled_orders中的第一个时间戳比订单中的第一个时间戳更早。 这是因为InfluxDB已经将orders中时间戳比我们本地服务器的时间戳早两个小时（假设我们在2016-05-13T00：59：59Z执行了SELECT查询）的数据删除了。 InfluxDB只会将downsampled_orders中52周之前的数据删除。
注意:
请注意，在第二个SELECT语句中我们完全有资格操作（即，我们使用语法"<retention_policy>"."<measurement>"）downsampled_orders。 我们必须在该查询中指定RP来选择驻留在除DEFAULT RP之外的RP中的数据。
默认情况下，InfluxDB每隔30分钟执行一次RP。 在两次检查之间，orders中可能有两个小时以上的数据。 InfluxDB执行检查RP的速率是一个可配置的设置，请参阅数据库配置。